buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.2"
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'org.spongepowered.mixin'

archivesBaseName = "${mod_name}-forge-${minecraft_version}"

project.ext.mixin_refmap = "${mod_id}-refmap.json"

minecraft {
    mappings channel: 'official', version: minecraft_version

    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }

        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Common")
    minecraftLibrary 'me.walkerknapp:devolay:2.1.0'
    shade 'me.walkerknapp:devolay:2.1.0'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    finalizedBy 'reobfShadowJar'
}

artifacts {
    shadowJar
}

reobf {
    shadowJar {}
}

mixin {
    // MixinGradle Settings
    add sourceSets.main, project.ext.mixin_refmap
    config 'mcndi.mixins.json'
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources

    def buildProps = project.properties.clone()
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }

    filesMatching('*.mixins.json') {
        expand buildProps
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

afterEvaluate {
    // Collect deps in runtimeClasspath but NOT in minecraft
    def deps = (configurations.runtimeClasspath - configurations.minecraft).join(';')
    // Add deps to classpath
    minecraft.runs.each { run ->
        run.token 'minecraft_classpath', deps
    }
}
